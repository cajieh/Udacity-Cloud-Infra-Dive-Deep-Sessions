apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  namespace: default
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.6
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: rootpassword
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.6
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: rootpassword
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
---
# This file contains the secret for mysql root password which is used in the mysql and backend deployments.
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: default
type: Opaque
data:
  rootpassword: cGFzc3dvcmQ=  # base64 encoded value of 'password'
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-svc
  namespace: default
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: frontend
  name: frontend
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: frontend
    spec:
      containers:
      - image: quay.io/cajieh0/taskmanager-frontend:latest
        name: frontend
        resources: {}
        ports:
          - containerPort: 3000
        env:
        - name: REACT_APP_BACKEND_URL
          value: "http://<backend-service-ip-or-name>:4000"
        - name: REACT_APP_NODE_ENV
          value: "production"

---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: frontend
  name: frontend
  namespace: default
spec:
  type: LoadBalancer
  ports:
    - port: 3000
      protocol: TCP
      targetPort: 3000
  selector:
    app: frontend
status:
  loadBalancer: {}
---

apiVersion: v1
data:
  dbname: taskmanager # Create the database in the MySQL pod container.
                      # Exec into the MySQL pod container
                      # - kubectl exec --stdin --tty <mysql-deployment-name> -- /bin/bash
                      # n the following command to login into MySQL:
                      # - mysql -u root -p
                      # Enter the password value encoded in myqsl-secret resource: password
                      # Then run the following command to create the database:
                      # - CREATE DATABASE taskmanager;
                      # This database name should match the value in the backend-cm ConfigMap.
                      # You can verify the database creation by running:
                      # - SHOW DATABASES;
                      # After creating the database, exit MySQL by typing 'exit'.
                      # Delete the backend pod to ensure it picks up the new database.
                      # kubectl delete pod <backend-pod-name>
  host: mysql-svc.default.svc.cluster.local
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: backend-cm
  namespace: default
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: backend
  name: backend-deployment
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: backend

    spec:
      containers:
      - image: quay.io/cajieh0/taskmanager-backend:latest
        name: backend
        resources: {}
        ports:
          - containerPort: 4000
        env:
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: backend-cm
              key: host
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: backend-cm
              key: dbname
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: rootpassword
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: backend
  name: backend-svc
  namespace: default
spec:
  type: LoadBalancer
  ports:
  - port: 4000
    protocol: TCP
    targetPort: 4000
  selector:
    app: backend
status:
  loadBalancer: {}